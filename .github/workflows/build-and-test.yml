name: Build and Test

on:
  workflow_dispatch:
    inputs:
      mlir_override:
        description: 'Git SHA of commit in tenstorrent/tt-mlir'
        required: false
        type: string
  workflow_call:
    inputs:
      mlir_override:
        description: 'Git SHA of commit in tenstorrent/tt-mlir'
        required: false
        type: string

permissions:
  packages: write
  checks: write
  pull-requests: write

jobs:
  # build-ttxla:

  #   timeout-minutes: 120
  #   strategy:
  #     fail-fast: false

  #   name: Build and test tt-xla
  #   runs-on: ubuntu-latest

  #   container:
  #     image: ghcr.io/tenstorrent/tt-mlir/tt-mlir-ci-ubuntu-22-04:latest #TODO update this to the correct image
  #     options: --user root

  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       submodules: recursive
  #       lfs: true

  #   - name: Set reusable strings
  #     id: strings
  #     shell: bash
  #     run: |
  #       echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
  #       echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
  #       echo "metal-lib-dir=$(pwd)/third_party/tt-mlir/src/tt-mlir/third_party/tt-metal/src/tt-metal-build/lib" >> "$GITHUB_OUTPUT"
  #       echo "install-output-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"

  #   - name: Git safe dir
  #     run: git config --global --add safe.directory ${{ steps.strings.outputs.work-dir }}


  #   # Build project

  #   - name: Configure CMake
  #     shell: bash
  #     run: |
  #       source venv/activate
  #       cmake -G Ninja \
  #       -B ${{ steps.strings.outputs.build-output-dir }} \
  #       -S ${{ steps.strings.outputs.work-dir }}

  #   - name: Build
  #     shell: bash
  #     run: |
  #       source venv/activate
  #       cmake --build ${{ steps.strings.outputs.build-output-dir }}
  #       cmake --install ${{ steps.strings.outputs.build-output-dir }}


  #   # This is needed to preserve file permissions
  #   # https://github.com/actions/upload-artifact?tab=readme-ov-file#permission-loss
  #   - name: 'Tar install directory and metal lib directory'
  #     shell: bash
  #     working-directory: ${{ steps.strings.outputs.install-output-dir }}
  #     run: |
  #       tar cvf artifact.tar .

  #   - name: Upload install folder to archive
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: install-artifacts
  #       path: ${{ steps.strings.outputs.build-output-dir }}/artifact.tar

  #   - name: Get the latest tag
  #     shell: bash
  #     run: |
  #       latest_tag=$(git describe --tags --abbrev=0)
  #       latest_tag=${latest_tag#v}
  #       echo "latest_tag=$latest_tag" >> $GITHUB_ENV
  #       commit_count=$(git rev-list ${{ env.latest_tag }}..HEAD --count)
  #       echo "commit_count=$commit_count" >> $GITHUB_ENV
  #       version="${{ env.latest_tag }}.${{ env.commit_count }}"
  #       echo "version=$version" >> $GITHUB_ENV
  #       echo $version

  build-image:
    runs-on: n300
    outputs:
      docker-image: ${{ steps.build.outputs.docker-image }}
    steps:
      - name: Fix permissions
        shell: bash
        run: sudo chown ubuntu:ubuntu -R $(pwd)

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker images and output the image name
        id: build
        shell: bash
        run: |
          # Output the image name
          set pipefail
          .github/build-docker-images.sh | tee docker.log
          DOCKER_CI_IMAGE=$(tail -n 1 docker.log)
          echo "DOCKER_CI_IMAGE $DOCKER_CI_IMAGE"
          echo "docker-image=$DOCKER_CI_IMAGE" >> "$GITHUB_OUTPUT"

  # # Run tests on TT hardware

  build-and-run-tests:
    timeout-minutes: 120
    needs: build-image
    strategy:
      fail-fast: false
      matrix:
        build: [
          {runs-on: n150, name: "run"},
          {runs-on: n300, name: "run"},
        ]

    runs-on:
      - in-service
      - ${{ matrix.build.runs-on }}

    container:
      image: ${{ needs.build-image.outputs.docker-image }}
      options: --device /dev/tenstorrent/0
      volumes:
        - /dev/hugepages:/dev/hugepages
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /etc/udev/rules.d:/etc/udev/rules.d
        - /lib/modules:/lib/modules
        - /opt/tt_metal_infra/provisioning/provisioning_env:/opt/tt_metal_infra/provisioning/provisioning_env

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Override tt-mlir SHA mlir_override is set
      if: ${{ inputs.mlir_override }}
      shell: bash
      run: |
          # Update the CMakeLists.txt file with the new SHA
          sed -i "s/set(TT_MLIR_VERSION \".*\")/set(TT_MLIR_VERSION \"${{ inputs.mlir_override }}\")/" third_party/CMakeLists.txt

    - name: Set reusable strings
      id: strings
      shell: bash
      env:
        job-name: "${{ github.job }} (${{ matrix.build.runs-on }}, ${{ matrix.build.name }})"
      run: |
        echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
        echo "install-output-dir=$(pwd)/install" >> "$GITHUB_OUTPUT"

        # Github job context unfortunately doesn't contain job_id, this is the workaround how to fetch it using GH API
        echo "Expected job name: ${{ env.job-name }}"
        JOB_ID=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs" | \
          jq -r '.jobs[] | select(.name | contains("${{ env.job-name }}")) | .id ')
        echo "Current job id: $JOB_ID"
        echo "job-id=$JOB_ID" >> "$GITHUB_OUTPUT"
        echo "test_report_path=report_$JOB_ID.xml" >> "$GITHUB_OUTPUT"

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        create-symlink: true
        key: ${{ matrix.build.runs-on }}

    # Build project
    - name: Configure CMake
      shell: bash
      run: |
        source venv/activate
        cmake -G Ninja \
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
        -DCODE_COVERAGE=ON \
        -B ${{ steps.strings.outputs.build-output-dir }} \
        -S ${{ steps.strings.outputs.work-dir }}

    - name: Build
      shell: bash
      run: |
        source venv/activate
        cmake --build ${{ steps.strings.outputs.build-output-dir }}
        cmake --install ${{ steps.strings.outputs.build-output-dir }}

    - name: Verify tt-mlir SHA override
      if: ${{ inputs.mlir_override }}
      continue-on-error: true
      shell: bash
      run: |
          cd third_party/tt-mlir
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          commit_sha=$(git rev-parse HEAD)
          commit_title=$(git log -1 --pretty=%s)
          echo "Branch name: $branch_name"
          echo "Commit SHA: $commit_sha"
          echo "Commit title: $commit_title"
          echo "::notice::Using tt-mlir: $branch_name, commit: $commit_sha, title: $commit_title"
          cd ../..

    - name: Run tests
      shell: bash
      run: |
        export LD_LIBRARY_PATH="/opt/ttmlir-toolchain/lib/:${{ steps.strings.outputs.install-output-dir }}/lib:${LD_LIBRARY_PATH}"
        source venv/activate
        pytest -v tests/ \
          --junitxml=${{ steps.strings.outputs.test_report_path }}

    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: test-reports-${{ matrix.build.runs-on }}-${{ matrix.test_group_id }}
        path: ${{ steps.strings.outputs.test_report_path }}

    - name: Show Test Report
      uses: mikepenz/action-junit-report@v5
      if: success() || failure()
      with:
        report_paths: ${{ steps.strings.outputs.test_report_path }}
        check_name: TT-XLA Tests
        comment: true
        updateComment: true
        detailed_summary: true
        group_suite: true

    - name: Prepare code coverage report
      run: |
        lcov --directory build --capture --output-file coverage.info
        lcov --extract coverage.info '**/src/*' --output-file coverage.info
        lcov --list coverage.info
