
# This workflow builds a Docker images for the project, optionally overriding the tt-mlir commit SHA,
# and outputs the image name for use in other workflows.

name: Build Docker Image

on:
  workflow_call:
    inputs:
      mlir_override:
        description: 'Git SHA of commit in tenstorrent/tt-mlir or branch name'
        required: false
        type: string
    outputs:
      docker-image:
        description: "Built docker image name"
        value: ${{ jobs.check-if-docker-exist.outputs.docker-image || jobs.build-image.outputs.docker-image }}

permissions:
  packages: write
  checks: write

jobs:

  check-if-docker-exist:
    runs-on: ubuntu-latest
    outputs:
      docker-image: ${{ steps.check.outputs.docker-image }}
    steps:
      - uses: actions/checkout@v4
      - name: Override tt-mlir SHA mlir_override is set
        if: ${{ inputs.mlir_override }}
        shell: bash
        run: |
            # Update the CMakeLists.txt file with the new SHA
            sed -i "s/set(TT_MLIR_VERSION \".*\")/set(TT_MLIR_VERSION \"${{ inputs.mlir_override }}\")/" third_party/CMakeLists.txt
      - name: Check if Docker image already exists
        id: check
        shell: bash
        run: |
          # Output the image name
          set +e  # Don't exit on command failure
          .github/build-docker-images.sh --check-only | tee docker.log
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 0 ]; then
            DOCKER_CI_IMAGE=$(tail -n 1 docker.log)
            echo "Docker image already exists: $DOCKER_CI_IMAGE"
            echo "docker-image=$DOCKER_CI_IMAGE" >> "$GITHUB_OUTPUT"
          else
            echo "Docker image does not exist, proceeding to build"
          fi

      # Run the next steps only when pushed to main. Docker image must already exist, tag it as latest
      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
      - name: Set latest tag on the image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          DOCKER_CI_IMAGE=${{ steps.check.outputs.docker-image }}
          if [ -z "$DOCKER_CI_IMAGE" ]; then
            echo "Error: steps.check.outputs.docker-image is not set"
            exit 1
          fi
          DOCKER_TAG=$(echo $DOCKER_CI_IMAGE | sed 's/^.*://')
          IMAGE_NAME=$(echo $DOCKER_CI_IMAGE | sed 's/:.*//')
          echo "Setting latest tag on the image $IMAGE_NAME:$DOCKER_TAG"
          skopeo copy "docker://$IMAGE_NAME:$DOCKER_TAG" "docker://$IMAGE_NAME:latest"

  build-image:
    needs: check-if-docker-exist
    if: needs.check-if-docker-exist.outputs.docker-image == ''
    runs-on: tt-ubuntu-2204-large-stable
    outputs:
      docker-image: ${{ steps.build.outputs.docker-image }}
    steps:

      - name: Override tt-mlir SHA mlir_override is set
        if: ${{ inputs.mlir_override }}
        shell: bash
        run: |
            # Update the CMakeLists.txt file with the new SHA
            sed -i "s/set(TT_MLIR_VERSION \".*\")/set(TT_MLIR_VERSION \"${{ inputs.mlir_override }}\")/" third_party/CMakeLists.txt

      - name: Verify third_party directory
        shell: bash
        run: |
          echo "Contents of third_party directory:"
          ls -l third_party || echo "third_party directory is missing or empty"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Build Docker images and output the image name
        id: build
        shell: bash
        run: |
          # Output the image name
          set pipefail
          .github/build-docker-images.sh | tee docker.log
          DOCKER_CI_IMAGE=$(tail -n 1 docker.log)
          echo "DOCKER_CI_IMAGE $DOCKER_CI_IMAGE"
          echo "docker-image=$DOCKER_CI_IMAGE" >> "$GITHUB_OUTPUT"
