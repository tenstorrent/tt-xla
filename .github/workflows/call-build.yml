name: Build tt-xla

# Build Artifact Naming and Reuse Logic:
# =====================================
#
# This workflow implements intelligent artifact caching to avoid unnecessary rebuilds:
#
# ARTIFACT NAMING STRATEGY:
# - Base format: "xla-whl-{build_type}"
# - build_type: "release" (default) or "codecov" (debug builds)
# - Commit SHA suffix: Added only for individual commits (not merges/PRs)
# - Examples:
#   * Regular commit: "xla-whl-release-a1b2c3d"
#   * Merge commit: "xla-whl-release"
#   * PR build: "xla-whl-release"
#   * Debug commit: "xla-whl-codecov-a1b2c3d"
#
# REUSE CONDITIONS:
# - Artifacts are reused ONLY when:
#   1. NOT a pull request (github.event_name != "pull_request")
#   2. NOT using mlir_override (inputs.mlir_override != true)
#   3. Exact artifact name match found in repository
#
# WORKFLOW LOGIC:
# 1. check-existing-artifact job:
#    - Always runs to generate consistent artifact names
#    - Conditionally checks for existing artifacts (based on reuse conditions)
#    - Returns artifact URL if found, empty if not found or conditions not met
# 2. build-ttxla job:
#    - Runs only when no existing artifact URL is available
#    - Performs full build and uploads new artifact
# 3. Workflow output:
#    - Returns existing artifact URL OR newly built artifact URL
#
# LOGIC CONSIDERATIONS:
# - mlir_override changes build inputs, so we never reuse artifacts
# - PR builds always rebuild to ensure fresh validation
# - Merge commits use base names for consistency across related commits
# - Individual commits get unique names to enable precise caching

on:
  workflow_call:
    inputs:
        mlir_override:
            description: 'Git SHA of commit in tenstorrent/tt-mlir'
            required: false
            type: string
        docker_image:
            description: 'Docker image to use for the build'
            required: true
            type: string
        debug_build:
            description: 'Is this debug build (or release)'
            required: false
            type: boolean
    outputs:
        wheel_url:
            description: 'URL of the uploaded wheel artifact'
            value: ${{ jobs.check-existing-artifact.outputs.wheel_url || jobs.build-ttxla.outputs.wheel_url }}

jobs:
  check-existing-artifact:
    runs-on: ubuntu-latest
    name: "Check for existing artifact"
    outputs:
      wheel_url: ${{ steps.check-artifact.outputs.url }}
      whl_artifact_name: ${{ steps.generate-name.outputs.whl_artifact_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate artifact name
        id: generate-name
        shell: bash
        run: |
          build_name=$(if [ '${{ inputs.debug_build }}' == 'true' ]; then echo 'codecov'; else echo 'release'; fi)
          # Add commit SHA to artifact name if not a merge commit
          if [[ "${{ github.event_name }}" != "pull_request" && $(git cat-file -p HEAD | grep -c "^parent ") -eq 1 ]]; then
            artifact_suffix="-$(git rev-parse --short HEAD)"
          else
            artifact_suffix=""
          fi
          whl_artifact_name="xla-whl-${build_name}${artifact_suffix}"
          echo "whl_artifact_name=${whl_artifact_name}" >> "$GITHUB_OUTPUT"
          echo "Generated artifact name: $whl_artifact_name"

      - name: Check if artifact exists
        if: ${{ github.event_name != 'pull_request' && inputs.mlir_override == null }}
        id: check-artifact
        shell: bash
        run: |
          # Use GitHub API to check for existing artifacts
          response=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?name=${{ steps.generate-name.outputs.whl_artifact_name }}")
          total_count=$(echo "$response" | jq -r '.total_count')

          if [ "$total_count" -gt 0 ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            # Get the download URL of the most recent artifact
            download_url=$(echo "$response" | jq -r '.artifacts[0].archive_download_url')
            echo "url=${download_url}" >> "$GITHUB_OUTPUT"
            echo "Found existing artifact: ${{ steps.generate-name.outputs.whl_artifact_name }}"
            echo "Artifact URL: $download_url"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "url=" >> "$GITHUB_OUTPUT"
            echo "No existing artifact found for: ${{ steps.generate-name.outputs.whl_artifact_name }}"
          fi

  build-ttxla:
    needs: check-existing-artifact
    if: ${{ !needs.check-existing-artifact.outputs.wheel_url }}
    timeout-minutes: 120
    runs-on: ubuntu-latest
    name: "Build tt-xla"
    outputs:
      wheel_url: ${{ steps.upload-wheel.outputs.artifact-url }}/zip
    container:
      image: ${{ inputs.docker_image }}

    steps:
      - name: Mark repo as safe for git
        run: |
            echo "Current user: $(whoami)"
            ls -ld $(pwd)
            git config --global --add safe.directory /__w/tt-xla/tt-xla
            git config --global --add safe.directory /__w/tt-xla/tt-xla/third_party/tt_forge_models

      - uses: actions/checkout@v4
        with:
            submodules: recursive
            repository: 'tenstorrent/tt-xla'

      - name: Override tt-mlir SHA mlir_override is set
        if: ${{ inputs.mlir_override }}
        shell: bash
        run: |
            # Update the CMakeLists.txt file with the new SHA
            sed -i "s/set(TT_MLIR_VERSION \".*\")/set(TT_MLIR_VERSION \"${{ inputs.mlir_override }}\")/" third_party/CMakeLists.txt

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
            echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
            echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
            echo "build-name=$(if [ '${{ inputs.debug_build }}' == 'true' ]; then echo 'codecov'; else echo 'release'; fi)" >> "$GITHUB_OUTPUT"

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
            create-symlink: true
            key: "${{ steps.strings.outputs.build-name }}-build"

      - name: Build
        shell: bash
        run: |
            source venv/activate
            cmake -G Ninja \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              $(if [ '${{ inputs.debug_build }}' == 'true' ]; then echo '-DCODE_COVERAGE=ON'; fi) \
              -B ${{ steps.strings.outputs.build-output-dir }} \
              -S ${{ steps.strings.outputs.work-dir }}
            cmake --build ${{ steps.strings.outputs.build-output-dir }}

      - name: Build the wheel
        shell: bash
        run: |
            source venv/activate
            cd ${{ steps.strings.outputs.work-dir }}/python_package
            python setup.py bdist_wheel

      - name: Upload the wheel
        id: upload-wheel
        uses: actions/upload-artifact@v4
        with:
            name: ${{ needs.check-existing-artifact.outputs.whl_artifact_name }}
            path: ${{ steps.strings.outputs.work-dir }}/python_package/dist/pjrt_plugin_tt*.whl
