name: Build tt-xla

# Implements artifact caching to avoid unnecessary rebuilds.
# Artifacts are reused only when: not a PR, no mlir_override, and exact name match exists.
# Naming: "xla-whl-{release|codecov}[-commit_sha]" (SHA added for individual commits only).

on:
  workflow_call:
    inputs:
        mlir_override:
            description: 'Git SHA of commit in tenstorrent/tt-mlir'
            required: false
            type: string
        docker_image:
            description: 'Docker image to use for the build'
            required: true
            type: string
        debug_build:
            description: 'Is this debug build (or release)'
            required: false
            type: boolean
    outputs:
        wheel_artifact_name:
            description: 'Name of the wheel artifact'
            value: ${{ jobs.check-existing-artifact.outputs.wheel_artifact_name }}
        wheel_release_vllm_tt_artifact_name:
            description: 'Name of the vllm-tt plugin wheel artifact'
            value: ${{ jobs.check-existing-artifact.outputs.wheel_release_vllm_tt_artifact_name }}
        build_artifact_name:
            description: 'Name of the build artifact'
            value: ${{ jobs.check-existing-artifact.outputs.build_artifact_name }}
        artifacts_run_id:
            description: 'Run ID of the artifacts'
            value: ${{ jobs.check-existing-artifact.outputs.artifacts_run_id || github.run_id }}

jobs:
  check-existing-artifact:
    runs-on: ubuntu-latest
    name: "Check for existing artifact"
    outputs:
      artifacts_run_id: ${{ steps.check-artifact.outputs.artifacts_run_id }}
      wheel_artifact_name: ${{ steps.generate-name.outputs.wheel_artifact_name }}
      wheel_release_vllm_tt_artifact_name: ${{ steps.generate-name.outputs.wheel_release_vllm_tt_artifact_name }}
      build_artifact_name: ${{ steps.generate-name.outputs.build_artifact_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate artifact name
        id: generate-name
        shell: bash
        run: |
          build_name=$(if [ '${{ inputs.debug_build }}' == 'true' ]; then echo 'codecov'; else echo 'release'; fi)
          # Add commit SHA to artifact name if not a merge commit
          if [[ "${{ github.event_name }}" != "pull_request" && $(git cat-file -p HEAD | grep -c "^parent ") -eq 1 ]]; then
            artifact_suffix="-$(git rev-parse --short HEAD)"
          else
            artifact_suffix=""
          fi
          wheel_artifact_name="xla-whl-${build_name}${artifact_suffix}"
          wheel_release_vllm_tt_artifact_name="vllm-tt-whl-${build_name}${artifact_suffix}"
          build_artifact_name="build-artifacts${artifact_suffix}"
          echo "wheel_artifact_name=${wheel_artifact_name}" >> "$GITHUB_OUTPUT"
          echo "wheel_release_vllm_tt_artifact_name=${wheel_release_vllm_tt_artifact_name}" >> "$GITHUB_OUTPUT"
          echo "build_artifact_name=${build_artifact_name}" >> "$GITHUB_OUTPUT"
          echo "Generated artifact name: $wheel_artifact_name"

      - name: Check if artifact exists
        if: ${{ github.event_name != 'pull_request' && inputs.mlir_override == null }}
        id: check-artifact
        shell: bash
        run: |
          # Use GitHub API to check for existing artifacts
          response=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?name=${{ steps.generate-name.outputs.wheel_artifact_name }}")
          total_count=$(echo "$response" | jq -r '.total_count')

          if [ "$total_count" -gt 0 ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            # Get the download URL of the most recent artifact
            download_url=$(echo "$response" | jq -r '.artifacts[0].archive_download_url')
            artifacts_run_id=$(echo "$response" | jq -r '.artifacts[0].workflow_run.id')
            echo "url=${download_url}" >> "$GITHUB_OUTPUT"
            echo "artifacts_run_id=${artifacts_run_id}" >> "$GITHUB_OUTPUT"
            echo "Found existing artifact: ${{ steps.generate-name.outputs.wheel_artifact_name }}"
            echo "Artifact URL: $download_url"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "url=" >> "$GITHUB_OUTPUT"
            echo "artifacts_run_id=" >> "$GITHUB_OUTPUT"
            echo "No existing artifact found for: ${{ steps.generate-name.outputs.wheel_artifact_name }}"
          fi

  build-ttxla:
    needs: check-existing-artifact
    if: ${{ !needs.check-existing-artifact.outputs.artifacts_run_id }}
    timeout-minutes: 120
    runs-on: tt-ubuntu-2204-large-stable
    name: "Build tt-xla"
    container:
      image: ${{ inputs.docker_image }}

    steps:
      - name: Mark repo as safe for git
        run: |
            echo "Current user: $(whoami)"
            ls -ld $(pwd)
            git config --global --add safe.directory /__w/tt-xla/tt-xla
            git config --global --add safe.directory /__w/tt-xla/tt-xla/third_party/tt_forge_models

      - uses: actions/checkout@v4
        with:
            submodules: recursive
            repository: 'tenstorrent/tt-xla'

      - name: Override tt-mlir SHA mlir_override is set
        if: ${{ inputs.mlir_override }}
        shell: bash
        run: |
            # Update the CMakeLists.txt file with the new SHA
            sed -i "s/set(TT_MLIR_VERSION \".*\")/set(TT_MLIR_VERSION \"${{ inputs.mlir_override }}\")/" third_party/CMakeLists.txt

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
            echo "work-dir=$(pwd)" >> "$GITHUB_OUTPUT"
            echo "build-output-dir=$(pwd)/build" >> "$GITHUB_OUTPUT"
            echo "build-name=$(if [ '${{ inputs.debug_build }}' == 'true' ]; then echo 'codecov'; else echo 'release'; fi)" >> "$GITHUB_OUTPUT"

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
            create-symlink: true
            key: "${{ steps.strings.outputs.build-name }}-build"

      - name: Build the wheel
        shell: bash
        run: |
            source venv/activate
            cd ${{ steps.strings.outputs.work-dir }}/python_package
            python setup.py bdist_wheel $(if [ '${{ inputs.debug_build }}' == 'true' ]; then echo '--code-coverage'; fi)

      - name: Upload the wheel
        id: upload-wheel
        uses: actions/upload-artifact@v4
        with:
            name: ${{ needs.check-existing-artifact.outputs.wheel_artifact_name }}
            path: ${{ steps.strings.outputs.work-dir }}/python_package/dist/pjrt_plugin_tt*.whl

      - name: Build vllm plugin wheel
        shell: bash
        run: |
            source venv/activate
            cd ${{ steps.strings.outputs.work-dir }}/integrations/vllm_plugin
            python setup.py bdist_wheel $(if [ '${{ inputs.debug_build }}' == 'true' ]; then echo '--code-coverage'; fi)

      - name: Upload the vllm plugin wheel
        id: upload-vllm-tt-wheel
        uses: actions/upload-artifact@v4
        with:
            name: ${{ needs.check-existing-artifact.outputs.wheel_release_vllm_tt_artifact_name }}
            path: ${{ steps.strings.outputs.work-dir }}/integrations/vllm_plugin/dist/vllm_tt*.whl

      - name: Archive Build Directory
        if: inputs.debug_build
        shell: bash
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: tar cf artifact.tar .

      - name: Upload Build Folder
        if: inputs.debug_build
        uses: actions/upload-artifact@v4
        with:
            name: ${{ needs.check-existing-artifact.outputs.build_artifact_name }}
            path: ${{ steps.strings.outputs.build-output-dir }}/artifact.tar

      - name: Remove tar archive
        if: inputs.debug_build
        shell: bash
        run: rm -f ${{ steps.strings.outputs.build-output-dir }}/artifact.tar
