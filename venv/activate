# SPDX-FileCopyrightText: Â© 2024 Tenstorrent AI ULC
#
# SPDX-License-Identifier: Apache-2.0
#

if [ -z "$TTMLIR_TOOLCHAIN_DIR" ]; then
  echo "WARNING: TTMLIR_TOOLCHAIN_DIR not set. Using default value /opt/ttmlir-toolchain"
  export TTMLIR_TOOLCHAIN_DIR="/opt/ttmlir-toolchain"
fi
export LD_LIBRARY_PATH=$TTMLIR_TOOLCHAIN_DIR/lib:$LD_LIBRARY_PATH
export SYSTEM_DIST_PACKAGES="/usr/local/lib/python3.11/dist-packages"
export PYTHONPATH="$(pwd):$(pwd)/tests:$SYSTEM_DIST_PACKAGES:$(pwd)/integrations/vllm_plugin:$(pwd)/third_party/tt-mlir/src/tt-mlir/build/python_packages"
# pytest alias for venv interpreter
alias pytest='python -m pytest'

export TTMLIR_VENV_DIR="$(pwd)/venv"
if [ -d $TTMLIR_VENV_DIR/bin ]; then
  [ -f $TTMLIR_VENV_DIR/bin/activate ] && source $TTMLIR_VENV_DIR/bin/activate
else
  echo "Creating virtual environment in $TTMLIR_VENV_DIR"
  python3.11 -m venv $TTMLIR_VENV_DIR
  source $TTMLIR_VENV_DIR/bin/activate
  pip install --upgrade pip
  # Requirements for third party projects are installed during their build in `CMakeLists.txt`
  pip install -r python_package/requirements.txt
  # Install dev/test requirements
  pip install -r venv/requirements-dev.txt
fi

if [ -n "$DOCKER_CACHE_ROOT" ]; then
  mkdir -p $(pwd)/dist
  cp "$DOCKER_CACHE_ROOT"/models/tt-ci-models-private/wheels/torch_xla-2.9.0+git1f21467-*.whl $(pwd)/dist/
else
  echo "DOCKER_CACHE_ROOT not set, assuming wheel is already present in dist/"
fi

echo "Uninstalling existing torch-xla package if any and installing from local wheel"
pip uninstall -y torch-xla
pip install $(pwd)/dist/torch_xla-2.9.0+git1f21467-*.whl
echo "Install complete."

export TTXLA_ENV_ACTIVATED=1
export TTMLIR_ENV_ACTIVATED=1
export TT_METAL_LOGGER_LEVEL="ERROR"
export ARCH_NAME="${ARCH_NAME:-wormhole_b0}"

export PATH=$TTMLIR_TOOLCHAIN_DIR/bin:$(pwd)/third_party/tt-mlir/src/tt-mlir/build/bin:$PATH
export TT_MLIR_HOME="$(pwd)/third_party/tt-mlir/src/tt-mlir/"
