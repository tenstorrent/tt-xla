module @jit_model_forward_jit attributes {mhlo.num_partitions = 4 : i32, mhlo.num_replicas = 1 : i32} {
  sdy.mesh @mesh = <["mp"=4]>
  func.func public @main(%arg0: tensor<4096x128256xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg1: tensor<4096x1024xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg2: tensor<4096x4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{"mp"}, {}]>}, %arg3: tensor<4096x4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg4: tensor<4096x1024xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg5: tensor<4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}]>}, %arg6: tensor<4096x14336xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg7: tensor<14336x4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{"mp"}, {}]>}, %arg8: tensor<4096x14336xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg9: tensor<4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}]>}, %arg10: tensor<4096x1024xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg11: tensor<4096x4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{"mp"}, {}]>}, %arg12: tensor<4096x4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg13: tensor<4096x1024xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg14: tensor<4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}]>}, %arg15: tensor<4096x14336xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg16: tensor<14336x4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{"mp"}, {}]>}, %arg17: tensor<4096x14336xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"mp"}]>}, %arg18: tensor<4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}]>}, %arg19: tensor<4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{}]>}, %arg20: tensor<128256x4096xf16> {sdy.sharding = #sdy.sharding<@mesh, [{"mp"}, {}]>}, %arg21: tensor<1x5xi32> {sdy.sharding = #sdy.sharding<@mesh, [{}, {}]>}, %arg22: tensor<1x5xi32> {sdy.sharding = #sdy.sharding<@mesh, [{}, {}]>}) -> (tensor<1x5x128256xf32> {jax.result_info = "result.logits"}) {
    %0 = sdy.sharding_constraint %arg21 <@mesh, [{}, {}]> : tensor<1x5xi32>
    %1 = sdy.sharding_constraint %arg22 <@mesh, [{}, {}]> : tensor<1x5xi32>
    %c = stablehlo.constant dense<0> : tensor<i32>
    %2 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<1x5xi32>
    %3 = stablehlo.compare  LT, %0, %2,  SIGNED : (tensor<1x5xi32>, tensor<1x5xi32>) -> tensor<1x5xi1>
    %c_0 = stablehlo.constant dense<128256> : tensor<i32>
    %4 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<i32>) -> tensor<1x5xi32>
    %5 = stablehlo.add %0, %4 : tensor<1x5xi32>
    %6 = stablehlo.select %3, %5, %0 : tensor<1x5xi1>, tensor<1x5xi32>
    %7 = stablehlo.broadcast_in_dim %6, dims = [0, 1] : (tensor<1x5xi32>) -> tensor<1x5x1xi32>
    %8 = "stablehlo.gather"(%arg20, %7) <{dimension_numbers = #stablehlo.gather<offset_dims = [2], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 2>, indices_are_sorted = false, slice_sizes = array<i64: 1, 4096>}> : (tensor<128256x4096xf16>, tensor<1x5x1xi32>) -> tensor<1x5x4096xf16>
    %9 = stablehlo.convert %8 : (tensor<1x5x4096xf16>) -> tensor<1x5x4096xf32>
    %10 = stablehlo.multiply %9, %9 : tensor<1x5x4096xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %11 = stablehlo.reduce(%10 init: %cst) applies stablehlo.add across dimensions = [2] : (tensor<1x5x4096xf32>, tensor<f32>) -> tensor<1x5xf32>
    %12 = stablehlo.broadcast_in_dim %11, dims = [0, 1] : (tensor<1x5xf32>) -> tensor<1x5x1xf32>
    %cst_1 = stablehlo.constant dense<4.096000e+03> : tensor<f32>
    %13 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<1x5x1xf32>
    %14 = stablehlo.divide %12, %13 : tensor<1x5x1xf32>
    %cst_2 = stablehlo.constant dense<9.99999974E-6> : tensor<f32>
    %15 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<f32>) -> tensor<1x5x1xf32>
    %16 = stablehlo.add %14, %15 : tensor<1x5x1xf32>
    %17 = stablehlo.rsqrt %16 : tensor<1x5x1xf32>
    %18 = stablehlo.broadcast_in_dim %17, dims = [0, 1, 2] : (tensor<1x5x1xf32>) -> tensor<1x5x4096xf32>
    %19 = stablehlo.multiply %9, %18 : tensor<1x5x4096xf32>
    %20 = stablehlo.convert %arg5 : (tensor<4096xf16>) -> tensor<4096xf32>
    %21 = stablehlo.broadcast_in_dim %20, dims = [2] : (tensor<4096xf32>) -> tensor<1x1x4096xf32>
    %22 = stablehlo.broadcast_in_dim %21, dims = [0, 1, 2] : (tensor<1x1x4096xf32>) -> tensor<1x5x4096xf32>
    %23 = stablehlo.multiply %19, %22 : tensor<1x5x4096xf32>
    %24 = stablehlo.iota dim = 0 : tensor<2048xi32>
    %25 = stablehlo.broadcast_in_dim %24, dims = [1] : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %26 = stablehlo.broadcast_in_dim %25, dims = [0, 1] : (tensor<1x2048xi32>) -> tensor<1x2048x1xi32>
    %27 = stablehlo.broadcast_in_dim %25, dims = [0, 2] : (tensor<1x2048xi32>) -> tensor<1x1x2048xi32>
    %28 = stablehlo.broadcast_in_dim %26, dims = [0, 1, 2] : (tensor<1x2048x1xi32>) -> tensor<1x2048x2048xi32>
    %29 = stablehlo.broadcast_in_dim %27, dims = [0, 1, 2] : (tensor<1x1x2048xi32>) -> tensor<1x2048x2048xi32>
    %30 = stablehlo.compare  GE, %28, %29,  SIGNED : (tensor<1x2048x2048xi32>, tensor<1x2048x2048xi32>) -> tensor<1x2048x2048xi1>
    %31 = stablehlo.broadcast_in_dim %30, dims = [0, 2, 3] : (tensor<1x2048x2048xi1>) -> tensor<1x1x2048x2048xi1>
    %32 = stablehlo.convert %23 : tensor<1x5x4096xf32>
    %33 = stablehlo.convert %arg3 : (tensor<4096x4096xf16>) -> tensor<4096x4096xf32>
    %34 = stablehlo.dot_general %32, %33, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x4096xf32>) -> tensor<1x5x4096xf32>
    %35 = stablehlo.convert %23 : tensor<1x5x4096xf32>
    %36 = stablehlo.convert %arg1 : (tensor<4096x1024xf16>) -> tensor<4096x1024xf32>
    %37 = stablehlo.dot_general %35, %36, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x1024xf32>) -> tensor<1x5x1024xf32>
    %38 = stablehlo.convert %23 : tensor<1x5x4096xf32>
    %39 = stablehlo.convert %arg4 : (tensor<4096x1024xf16>) -> tensor<4096x1024xf32>
    %40 = stablehlo.dot_general %38, %39, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x1024xf32>) -> tensor<1x5x1024xf32>
    %41 = stablehlo.reshape %34 : (tensor<1x5x4096xf32>) -> tensor<1x5x32x128xf32>
    %42 = stablehlo.reshape %37 : (tensor<1x5x1024xf32>) -> tensor<1x5x8x128xf32>
    %43 = stablehlo.reshape %40 : (tensor<1x5x1024xf32>) -> tensor<1x5x8x128xf32>
    %44 = stablehlo.slice %31 [0:1, 0:1, 0:5, 0:5] : (tensor<1x1x2048x2048xi1>) -> tensor<1x1x5x5xi1>
    %45 = stablehlo.broadcast_in_dim %1, dims = [0, 3] : (tensor<1x5xi32>) -> tensor<1x1x1x5xi32>
    %46 = stablehlo.broadcast_in_dim %45, dims = [0, 1, 2, 3] : (tensor<1x1x1x5xi32>) -> tensor<1x1x5x5xi32>
    %47 = stablehlo.convert %44 : (tensor<1x1x5x5xi1>) -> tensor<1x1x5x5xi32>
    %48 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<1x1x5x5xi32>
    %49 = stablehlo.compare  NE, %46, %48,  SIGNED : (tensor<1x1x5x5xi32>, tensor<1x1x5x5xi32>) -> tensor<1x1x5x5xi1>
    %50 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<1x1x5x5xi32>
    %51 = stablehlo.compare  NE, %47, %50,  SIGNED : (tensor<1x1x5x5xi32>, tensor<1x1x5x5xi32>) -> tensor<1x1x5x5xi1>
    %52 = stablehlo.and %49, %51 : tensor<1x1x5x5xi1>
    %53 = stablehlo.convert %52 : (tensor<1x1x5x5xi1>) -> tensor<1x1x5x5xf32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %54 = stablehlo.broadcast_in_dim %cst_3, dims = [] : (tensor<f32>) -> tensor<1x1x5x5xf32>
    %55 = stablehlo.compare  GT, %53, %54,  FLOAT : (tensor<1x1x5x5xf32>, tensor<1x1x5x5xf32>) -> tensor<1x1x5x5xi1>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %56 = stablehlo.broadcast_in_dim %cst_4, dims = [] : (tensor<f32>) -> tensor<1x1x5x5xf32>
    %57 = stablehlo.convert %56 : tensor<1x1x5x5xf32>
    %cst_5 = stablehlo.constant dense<-3.40282347E+38> : tensor<f32>
    %58 = stablehlo.broadcast_in_dim %cst_5, dims = [] : (tensor<f32>) -> tensor<1x1x5x5xf32>
    %59 = stablehlo.select %55, %57, %58 : tensor<1x1x5x5xi1>, tensor<1x1x5x5xf32>
    %60 = stablehlo.broadcast_in_dim %42, dims = [0, 1, 2, 4] : (tensor<1x5x8x128xf32>) -> tensor<1x5x8x1x128xf32>
    %61 = stablehlo.broadcast_in_dim %60, dims = [0, 1, 2, 3, 5] : (tensor<1x5x8x1x128xf32>) -> tensor<1x5x8x1x4x128xf32>
    %62 = stablehlo.reshape %61 : (tensor<1x5x8x1x4x128xf32>) -> tensor<1x5x8x4x128xf32>
    %63 = stablehlo.reshape %62 : (tensor<1x5x8x4x128xf32>) -> tensor<1x5x32x128xf32>
    %64 = stablehlo.broadcast_in_dim %43, dims = [0, 1, 2, 4] : (tensor<1x5x8x128xf32>) -> tensor<1x5x8x1x128xf32>
    %65 = stablehlo.broadcast_in_dim %64, dims = [0, 1, 2, 3, 5] : (tensor<1x5x8x1x128xf32>) -> tensor<1x5x8x1x4x128xf32>
    %66 = stablehlo.reshape %65 : (tensor<1x5x8x1x4x128xf32>) -> tensor<1x5x8x4x128xf32>
    %67 = stablehlo.reshape %66 : (tensor<1x5x8x4x128xf32>) -> tensor<1x5x32x128xf32>
    %cst_6 = stablehlo.constant dense<1.280000e+02> : tensor<f32>
    %68 = stablehlo.sqrt %cst_6 : tensor<f32>
    %69 = stablehlo.convert %68 : tensor<f32>
    %70 = stablehlo.broadcast_in_dim %69, dims = [] : (tensor<f32>) -> tensor<1x5x32x128xf32>
    %71 = stablehlo.divide %41, %70 : tensor<1x5x32x128xf32>
    %72 = stablehlo.dot_general %71, %63, batching_dims = [0, 2] x [0, 2], contracting_dims = [3] x [3], precision = [DEFAULT, DEFAULT] : (tensor<1x5x32x128xf32>, tensor<1x5x32x128xf32>) -> tensor<1x32x5x5xf32>
    %73 = stablehlo.broadcast_in_dim %59, dims = [0, 1, 2, 3] : (tensor<1x1x5x5xf32>) -> tensor<1x32x5x5xf32>
    %74 = stablehlo.add %72, %73 : tensor<1x32x5x5xf32>
    %cst_7 = stablehlo.constant dense<0xFF800000> : tensor<f32>
    %75 = stablehlo.reduce(%74 init: %cst_7) applies stablehlo.maximum across dimensions = [3] : (tensor<1x32x5x5xf32>, tensor<f32>) -> tensor<1x32x5xf32>
    %cst_8 = stablehlo.constant dense<0xFF800000> : tensor<f32>
    %76 = stablehlo.broadcast_in_dim %cst_8, dims = [] : (tensor<f32>) -> tensor<1x32x5xf32>
    %77 = stablehlo.maximum %76, %75 : tensor<1x32x5xf32>
    %78 = stablehlo.broadcast_in_dim %77, dims = [0, 1, 2] : (tensor<1x32x5xf32>) -> tensor<1x32x5x1xf32>
    %79 = stablehlo.broadcast_in_dim %78, dims = [0, 1, 2, 3] : (tensor<1x32x5x1xf32>) -> tensor<1x32x5x5xf32>
    %80 = stablehlo.subtract %74, %79 : tensor<1x32x5x5xf32>
    %81 = stablehlo.exponential %80 : tensor<1x32x5x5xf32>
    %cst_9 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %82 = stablehlo.reduce(%81 init: %cst_9) applies stablehlo.add across dimensions = [3] : (tensor<1x32x5x5xf32>, tensor<f32>) -> tensor<1x32x5xf32>
    %83 = stablehlo.broadcast_in_dim %82, dims = [0, 1, 2] : (tensor<1x32x5xf32>) -> tensor<1x32x5x1xf32>
    %84 = stablehlo.broadcast_in_dim %83, dims = [0, 1, 2, 3] : (tensor<1x32x5x1xf32>) -> tensor<1x32x5x5xf32>
    %85 = stablehlo.divide %81, %84 : tensor<1x32x5x5xf32>
    %86 = stablehlo.dot_general %67, %85, batching_dims = [0, 2] x [0, 1], contracting_dims = [1] x [3], precision = [DEFAULT, DEFAULT] : (tensor<1x5x32x128xf32>, tensor<1x32x5x5xf32>) -> tensor<1x32x128x5xf32>
    %87 = stablehlo.transpose %86, dims = [0, 3, 1, 2] : (tensor<1x32x128x5xf32>) -> tensor<1x5x32x128xf32>
    %88 = stablehlo.reshape %87 : (tensor<1x5x32x128xf32>) -> tensor<1x5x4096xf32>
    %89 = stablehlo.convert %88 : tensor<1x5x4096xf32>
    %90 = stablehlo.convert %arg2 : (tensor<4096x4096xf16>) -> tensor<4096x4096xf32>
    %91 = stablehlo.dot_general %89, %90, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x4096xf32>) -> tensor<1x5x4096xf32>
    %92 = stablehlo.convert %8 : (tensor<1x5x4096xf16>) -> tensor<1x5x4096xf32>
    %93 = stablehlo.add %92, %91 : tensor<1x5x4096xf32>
    %94 = stablehlo.multiply %93, %93 : tensor<1x5x4096xf32>
    %cst_10 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %95 = stablehlo.reduce(%94 init: %cst_10) applies stablehlo.add across dimensions = [2] : (tensor<1x5x4096xf32>, tensor<f32>) -> tensor<1x5xf32>
    %96 = stablehlo.broadcast_in_dim %95, dims = [0, 1] : (tensor<1x5xf32>) -> tensor<1x5x1xf32>
    %97 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<1x5x1xf32>
    %98 = stablehlo.divide %96, %97 : tensor<1x5x1xf32>
    %99 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<f32>) -> tensor<1x5x1xf32>
    %100 = stablehlo.add %98, %99 : tensor<1x5x1xf32>
    %101 = stablehlo.rsqrt %100 : tensor<1x5x1xf32>
    %102 = stablehlo.broadcast_in_dim %101, dims = [0, 1, 2] : (tensor<1x5x1xf32>) -> tensor<1x5x4096xf32>
    %103 = stablehlo.multiply %93, %102 : tensor<1x5x4096xf32>
    %104 = stablehlo.convert %arg9 : (tensor<4096xf16>) -> tensor<4096xf32>
    %105 = stablehlo.broadcast_in_dim %104, dims = [2] : (tensor<4096xf32>) -> tensor<1x1x4096xf32>
    %106 = stablehlo.broadcast_in_dim %105, dims = [0, 1, 2] : (tensor<1x1x4096xf32>) -> tensor<1x5x4096xf32>
    %107 = stablehlo.multiply %103, %106 : tensor<1x5x4096xf32>
    %108 = stablehlo.convert %107 : tensor<1x5x4096xf32>
    %109 = stablehlo.convert %arg6 : (tensor<4096x14336xf16>) -> tensor<4096x14336xf32>
    %110 = stablehlo.dot_general %108, %109, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x14336xf32>) -> tensor<1x5x14336xf32>
    %111 = call @silu(%110) : (tensor<1x5x14336xf32>) -> tensor<1x5x14336xf32>
    %112 = stablehlo.convert %107 : tensor<1x5x4096xf32>
    %113 = stablehlo.convert %arg8 : (tensor<4096x14336xf16>) -> tensor<4096x14336xf32>
    %114 = stablehlo.dot_general %112, %113, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x14336xf32>) -> tensor<1x5x14336xf32>
    %115 = stablehlo.multiply %111, %114 : tensor<1x5x14336xf32>
    %116 = stablehlo.convert %115 : tensor<1x5x14336xf32>
    %117 = stablehlo.convert %arg7 : (tensor<14336x4096xf16>) -> tensor<14336x4096xf32>
    %118 = stablehlo.dot_general %116, %117, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x14336xf32>, tensor<14336x4096xf32>) -> tensor<1x5x4096xf32>
    %119 = stablehlo.add %93, %118 : tensor<1x5x4096xf32>
    %120 = stablehlo.multiply %119, %119 : tensor<1x5x4096xf32>
    %cst_11 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %121 = stablehlo.reduce(%120 init: %cst_11) applies stablehlo.add across dimensions = [2] : (tensor<1x5x4096xf32>, tensor<f32>) -> tensor<1x5xf32>
    %122 = stablehlo.broadcast_in_dim %121, dims = [0, 1] : (tensor<1x5xf32>) -> tensor<1x5x1xf32>
    %123 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<1x5x1xf32>
    %124 = stablehlo.divide %122, %123 : tensor<1x5x1xf32>
    %125 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<f32>) -> tensor<1x5x1xf32>
    %126 = stablehlo.add %124, %125 : tensor<1x5x1xf32>
    %127 = stablehlo.rsqrt %126 : tensor<1x5x1xf32>
    %128 = stablehlo.broadcast_in_dim %127, dims = [0, 1, 2] : (tensor<1x5x1xf32>) -> tensor<1x5x4096xf32>
    %129 = stablehlo.multiply %119, %128 : tensor<1x5x4096xf32>
    %130 = stablehlo.convert %arg14 : (tensor<4096xf16>) -> tensor<4096xf32>
    %131 = stablehlo.broadcast_in_dim %130, dims = [2] : (tensor<4096xf32>) -> tensor<1x1x4096xf32>
    %132 = stablehlo.broadcast_in_dim %131, dims = [0, 1, 2] : (tensor<1x1x4096xf32>) -> tensor<1x5x4096xf32>
    %133 = stablehlo.multiply %129, %132 : tensor<1x5x4096xf32>
    %134 = stablehlo.iota dim = 0 : tensor<2048xi32>
    %135 = stablehlo.broadcast_in_dim %134, dims = [1] : (tensor<2048xi32>) -> tensor<1x2048xi32>
    %136 = stablehlo.broadcast_in_dim %135, dims = [0, 1] : (tensor<1x2048xi32>) -> tensor<1x2048x1xi32>
    %137 = stablehlo.broadcast_in_dim %135, dims = [0, 2] : (tensor<1x2048xi32>) -> tensor<1x1x2048xi32>
    %138 = stablehlo.broadcast_in_dim %136, dims = [0, 1, 2] : (tensor<1x2048x1xi32>) -> tensor<1x2048x2048xi32>
    %139 = stablehlo.broadcast_in_dim %137, dims = [0, 1, 2] : (tensor<1x1x2048xi32>) -> tensor<1x2048x2048xi32>
    %140 = stablehlo.compare  GE, %138, %139,  SIGNED : (tensor<1x2048x2048xi32>, tensor<1x2048x2048xi32>) -> tensor<1x2048x2048xi1>
    %141 = stablehlo.broadcast_in_dim %140, dims = [0, 2, 3] : (tensor<1x2048x2048xi1>) -> tensor<1x1x2048x2048xi1>
    %142 = stablehlo.convert %133 : tensor<1x5x4096xf32>
    %143 = stablehlo.convert %arg12 : (tensor<4096x4096xf16>) -> tensor<4096x4096xf32>
    %144 = stablehlo.dot_general %142, %143, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x4096xf32>) -> tensor<1x5x4096xf32>
    %145 = stablehlo.convert %133 : tensor<1x5x4096xf32>
    %146 = stablehlo.convert %arg10 : (tensor<4096x1024xf16>) -> tensor<4096x1024xf32>
    %147 = stablehlo.dot_general %145, %146, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x1024xf32>) -> tensor<1x5x1024xf32>
    %148 = stablehlo.convert %133 : tensor<1x5x4096xf32>
    %149 = stablehlo.convert %arg13 : (tensor<4096x1024xf16>) -> tensor<4096x1024xf32>
    %150 = stablehlo.dot_general %148, %149, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x1024xf32>) -> tensor<1x5x1024xf32>
    %151 = stablehlo.reshape %144 : (tensor<1x5x4096xf32>) -> tensor<1x5x32x128xf32>
    %152 = stablehlo.reshape %147 : (tensor<1x5x1024xf32>) -> tensor<1x5x8x128xf32>
    %153 = stablehlo.reshape %150 : (tensor<1x5x1024xf32>) -> tensor<1x5x8x128xf32>
    %154 = stablehlo.slice %141 [0:1, 0:1, 0:5, 0:5] : (tensor<1x1x2048x2048xi1>) -> tensor<1x1x5x5xi1>
    %155 = stablehlo.broadcast_in_dim %1, dims = [0, 3] : (tensor<1x5xi32>) -> tensor<1x1x1x5xi32>
    %156 = stablehlo.broadcast_in_dim %155, dims = [0, 1, 2, 3] : (tensor<1x1x1x5xi32>) -> tensor<1x1x5x5xi32>
    %157 = stablehlo.convert %154 : (tensor<1x1x5x5xi1>) -> tensor<1x1x5x5xi32>
    %158 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<1x1x5x5xi32>
    %159 = stablehlo.compare  NE, %156, %158,  SIGNED : (tensor<1x1x5x5xi32>, tensor<1x1x5x5xi32>) -> tensor<1x1x5x5xi1>
    %160 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<1x1x5x5xi32>
    %161 = stablehlo.compare  NE, %157, %160,  SIGNED : (tensor<1x1x5x5xi32>, tensor<1x1x5x5xi32>) -> tensor<1x1x5x5xi1>
    %162 = stablehlo.and %159, %161 : tensor<1x1x5x5xi1>
    %163 = stablehlo.convert %162 : (tensor<1x1x5x5xi1>) -> tensor<1x1x5x5xf32>
    %164 = stablehlo.broadcast_in_dim %cst_3, dims = [] : (tensor<f32>) -> tensor<1x1x5x5xf32>
    %165 = stablehlo.compare  GT, %163, %164,  FLOAT : (tensor<1x1x5x5xf32>, tensor<1x1x5x5xf32>) -> tensor<1x1x5x5xi1>
    %166 = stablehlo.broadcast_in_dim %cst_4, dims = [] : (tensor<f32>) -> tensor<1x1x5x5xf32>
    %167 = stablehlo.convert %166 : tensor<1x1x5x5xf32>
    %168 = stablehlo.broadcast_in_dim %cst_5, dims = [] : (tensor<f32>) -> tensor<1x1x5x5xf32>
    %169 = stablehlo.select %165, %167, %168 : tensor<1x1x5x5xi1>, tensor<1x1x5x5xf32>
    %170 = stablehlo.broadcast_in_dim %152, dims = [0, 1, 2, 4] : (tensor<1x5x8x128xf32>) -> tensor<1x5x8x1x128xf32>
    %171 = stablehlo.broadcast_in_dim %170, dims = [0, 1, 2, 3, 5] : (tensor<1x5x8x1x128xf32>) -> tensor<1x5x8x1x4x128xf32>
    %172 = stablehlo.reshape %171 : (tensor<1x5x8x1x4x128xf32>) -> tensor<1x5x8x4x128xf32>
    %173 = stablehlo.reshape %172 : (tensor<1x5x8x4x128xf32>) -> tensor<1x5x32x128xf32>
    %174 = stablehlo.broadcast_in_dim %153, dims = [0, 1, 2, 4] : (tensor<1x5x8x128xf32>) -> tensor<1x5x8x1x128xf32>
    %175 = stablehlo.broadcast_in_dim %174, dims = [0, 1, 2, 3, 5] : (tensor<1x5x8x1x128xf32>) -> tensor<1x5x8x1x4x128xf32>
    %176 = stablehlo.reshape %175 : (tensor<1x5x8x1x4x128xf32>) -> tensor<1x5x8x4x128xf32>
    %177 = stablehlo.reshape %176 : (tensor<1x5x8x4x128xf32>) -> tensor<1x5x32x128xf32>
    %178 = stablehlo.sqrt %cst_6 : tensor<f32>
    %179 = stablehlo.convert %178 : tensor<f32>
    %180 = stablehlo.broadcast_in_dim %179, dims = [] : (tensor<f32>) -> tensor<1x5x32x128xf32>
    %181 = stablehlo.divide %151, %180 : tensor<1x5x32x128xf32>
    %182 = stablehlo.dot_general %181, %173, batching_dims = [0, 2] x [0, 2], contracting_dims = [3] x [3], precision = [DEFAULT, DEFAULT] : (tensor<1x5x32x128xf32>, tensor<1x5x32x128xf32>) -> tensor<1x32x5x5xf32>
    %183 = stablehlo.broadcast_in_dim %169, dims = [0, 1, 2, 3] : (tensor<1x1x5x5xf32>) -> tensor<1x32x5x5xf32>
    %184 = stablehlo.add %182, %183 : tensor<1x32x5x5xf32>
    %cst_12 = stablehlo.constant dense<0xFF800000> : tensor<f32>
    %185 = stablehlo.reduce(%184 init: %cst_12) applies stablehlo.maximum across dimensions = [3] : (tensor<1x32x5x5xf32>, tensor<f32>) -> tensor<1x32x5xf32>
    %186 = stablehlo.broadcast_in_dim %cst_8, dims = [] : (tensor<f32>) -> tensor<1x32x5xf32>
    %187 = stablehlo.maximum %186, %185 : tensor<1x32x5xf32>
    %188 = stablehlo.broadcast_in_dim %187, dims = [0, 1, 2] : (tensor<1x32x5xf32>) -> tensor<1x32x5x1xf32>
    %189 = stablehlo.broadcast_in_dim %188, dims = [0, 1, 2, 3] : (tensor<1x32x5x1xf32>) -> tensor<1x32x5x5xf32>
    %190 = stablehlo.subtract %184, %189 : tensor<1x32x5x5xf32>
    %191 = stablehlo.exponential %190 : tensor<1x32x5x5xf32>
    %cst_13 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %192 = stablehlo.reduce(%191 init: %cst_13) applies stablehlo.add across dimensions = [3] : (tensor<1x32x5x5xf32>, tensor<f32>) -> tensor<1x32x5xf32>
    %193 = stablehlo.broadcast_in_dim %192, dims = [0, 1, 2] : (tensor<1x32x5xf32>) -> tensor<1x32x5x1xf32>
    %194 = stablehlo.broadcast_in_dim %193, dims = [0, 1, 2, 3] : (tensor<1x32x5x1xf32>) -> tensor<1x32x5x5xf32>
    %195 = stablehlo.divide %191, %194 : tensor<1x32x5x5xf32>
    %196 = stablehlo.dot_general %177, %195, batching_dims = [0, 2] x [0, 1], contracting_dims = [1] x [3], precision = [DEFAULT, DEFAULT] : (tensor<1x5x32x128xf32>, tensor<1x32x5x5xf32>) -> tensor<1x32x128x5xf32>
    %197 = stablehlo.transpose %196, dims = [0, 3, 1, 2] : (tensor<1x32x128x5xf32>) -> tensor<1x5x32x128xf32>
    %198 = stablehlo.reshape %197 : (tensor<1x5x32x128xf32>) -> tensor<1x5x4096xf32>
    %199 = stablehlo.convert %198 : tensor<1x5x4096xf32>
    %200 = stablehlo.convert %arg11 : (tensor<4096x4096xf16>) -> tensor<4096x4096xf32>
    %201 = stablehlo.dot_general %199, %200, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x4096xf32>) -> tensor<1x5x4096xf32>
    %202 = stablehlo.add %119, %201 : tensor<1x5x4096xf32>
    %203 = stablehlo.multiply %202, %202 : tensor<1x5x4096xf32>
    %cst_14 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %204 = stablehlo.reduce(%203 init: %cst_14) applies stablehlo.add across dimensions = [2] : (tensor<1x5x4096xf32>, tensor<f32>) -> tensor<1x5xf32>
    %205 = stablehlo.broadcast_in_dim %204, dims = [0, 1] : (tensor<1x5xf32>) -> tensor<1x5x1xf32>
    %206 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<1x5x1xf32>
    %207 = stablehlo.divide %205, %206 : tensor<1x5x1xf32>
    %208 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<f32>) -> tensor<1x5x1xf32>
    %209 = stablehlo.add %207, %208 : tensor<1x5x1xf32>
    %210 = stablehlo.rsqrt %209 : tensor<1x5x1xf32>
    %211 = stablehlo.broadcast_in_dim %210, dims = [0, 1, 2] : (tensor<1x5x1xf32>) -> tensor<1x5x4096xf32>
    %212 = stablehlo.multiply %202, %211 : tensor<1x5x4096xf32>
    %213 = stablehlo.convert %arg18 : (tensor<4096xf16>) -> tensor<4096xf32>
    %214 = stablehlo.broadcast_in_dim %213, dims = [2] : (tensor<4096xf32>) -> tensor<1x1x4096xf32>
    %215 = stablehlo.broadcast_in_dim %214, dims = [0, 1, 2] : (tensor<1x1x4096xf32>) -> tensor<1x5x4096xf32>
    %216 = stablehlo.multiply %212, %215 : tensor<1x5x4096xf32>
    %217 = stablehlo.convert %216 : tensor<1x5x4096xf32>
    %218 = stablehlo.convert %arg15 : (tensor<4096x14336xf16>) -> tensor<4096x14336xf32>
    %219 = stablehlo.dot_general %217, %218, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x14336xf32>) -> tensor<1x5x14336xf32>
    %220 = call @silu(%219) : (tensor<1x5x14336xf32>) -> tensor<1x5x14336xf32>
    %221 = stablehlo.convert %216 : tensor<1x5x4096xf32>
    %222 = stablehlo.convert %arg17 : (tensor<4096x14336xf16>) -> tensor<4096x14336xf32>
    %223 = stablehlo.dot_general %221, %222, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x14336xf32>) -> tensor<1x5x14336xf32>
    %224 = stablehlo.multiply %220, %223 : tensor<1x5x14336xf32>
    %225 = stablehlo.convert %224 : tensor<1x5x14336xf32>
    %226 = stablehlo.convert %arg16 : (tensor<14336x4096xf16>) -> tensor<14336x4096xf32>
    %227 = stablehlo.dot_general %225, %226, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x14336xf32>, tensor<14336x4096xf32>) -> tensor<1x5x4096xf32>
    %228 = stablehlo.add %202, %227 : tensor<1x5x4096xf32>
    %229 = stablehlo.multiply %228, %228 : tensor<1x5x4096xf32>
    %cst_15 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %230 = stablehlo.reduce(%229 init: %cst_15) applies stablehlo.add across dimensions = [2] : (tensor<1x5x4096xf32>, tensor<f32>) -> tensor<1x5xf32>
    %231 = stablehlo.broadcast_in_dim %230, dims = [0, 1] : (tensor<1x5xf32>) -> tensor<1x5x1xf32>
    %232 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<1x5x1xf32>
    %233 = stablehlo.divide %231, %232 : tensor<1x5x1xf32>
    %234 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<f32>) -> tensor<1x5x1xf32>
    %235 = stablehlo.add %233, %234 : tensor<1x5x1xf32>
    %236 = stablehlo.rsqrt %235 : tensor<1x5x1xf32>
    %237 = stablehlo.broadcast_in_dim %236, dims = [0, 1, 2] : (tensor<1x5x1xf32>) -> tensor<1x5x4096xf32>
    %238 = stablehlo.multiply %228, %237 : tensor<1x5x4096xf32>
    %239 = stablehlo.convert %arg19 : (tensor<4096xf16>) -> tensor<4096xf32>
    %240 = stablehlo.broadcast_in_dim %239, dims = [2] : (tensor<4096xf32>) -> tensor<1x1x4096xf32>
    %241 = stablehlo.broadcast_in_dim %240, dims = [0, 1, 2] : (tensor<1x1x4096xf32>) -> tensor<1x5x4096xf32>
    %242 = stablehlo.multiply %238, %241 : tensor<1x5x4096xf32>
    %243 = stablehlo.convert %242 : tensor<1x5x4096xf32>
    %244 = stablehlo.convert %arg0 : (tensor<4096x128256xf16>) -> tensor<4096x128256xf32>
    %245 = stablehlo.dot_general %243, %244, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x5x4096xf32>, tensor<4096x128256xf32>) -> tensor<1x5x128256xf32>
    return %245 : tensor<1x5x128256xf32>
  }
  func.func private @silu(%arg0: tensor<1x5x14336xf32>) -> tensor<1x5x14336xf32> {
    %0 = stablehlo.negate %arg0 : tensor<1x5x14336xf32>
    %1 = stablehlo.exponential %0 : tensor<1x5x14336xf32>
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %2 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<1x5x14336xf32>
    %3 = stablehlo.add %2, %1 : tensor<1x5x14336xf32>
    %4 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<1x5x14336xf32>
    %5 = stablehlo.divide %4, %3 : tensor<1x5x14336xf32>
    %6 = stablehlo.multiply %arg0, %5 : tensor<1x5x14336xf32>
    return %6 : tensor<1x5x14336xf32>
  }
}
